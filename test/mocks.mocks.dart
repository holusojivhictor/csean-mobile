// Mocks generated by Mockito 5.1.0 from annotations
// in csean_mobile/test/mocks.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:csean_mobile/domain/enums/enum.dart' as _i4;
import 'package:csean_mobile/domain/models/model.dart' as _i2;
import 'package:csean_mobile/domain/services/device_info_service.dart' as _i7;
import 'package:csean_mobile/domain/services/logging_service.dart' as _i6;
import 'package:csean_mobile/domain/services/settings_service.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeAppSettings_0 extends _i1.Fake implements _i2.AppSettings {}

/// A class which mocks [SettingsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSettingsService extends _i1.Mock implements _i3.SettingsService {
  MockSettingsService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AppSettings get appSettings =>
      (super.noSuchMethod(Invocation.getter(#appSettings),
          returnValue: _FakeAppSettings_0()) as _i2.AppSettings);
  @override
  _i4.AppThemeType get appTheme =>
      (super.noSuchMethod(Invocation.getter(#appTheme),
          returnValue: _i4.AppThemeType.light) as _i4.AppThemeType);
  @override
  set appTheme(_i4.AppThemeType? theme) =>
      super.noSuchMethod(Invocation.setter(#appTheme, theme),
          returnValueForMissingStub: null);
  @override
  _i4.AppLanguageType get language =>
      (super.noSuchMethod(Invocation.getter(#language),
          returnValue: _i4.AppLanguageType.english) as _i4.AppLanguageType);
  @override
  set language(_i4.AppLanguageType? lang) =>
      super.noSuchMethod(Invocation.setter(#language, lang),
          returnValueForMissingStub: null);
  @override
  bool get isFirstInstall => (super
          .noSuchMethod(Invocation.getter(#isFirstInstall), returnValue: false)
      as bool);
  @override
  set isFirstInstall(bool? itIs) =>
      super.noSuchMethod(Invocation.setter(#isFirstInstall, itIs),
          returnValueForMissingStub: null);
  @override
  bool get doubleBackToClose =>
      (super.noSuchMethod(Invocation.getter(#doubleBackToClose),
          returnValue: false) as bool);
  @override
  set doubleBackToClose(bool? value) =>
      super.noSuchMethod(Invocation.setter(#doubleBackToClose, value),
          returnValueForMissingStub: null);
  @override
  bool get isProfileHeaderSet =>
      (super.noSuchMethod(Invocation.getter(#isProfileHeaderSet),
          returnValue: false) as bool);
  @override
  set isProfileHeaderSet(bool? value) =>
      super.noSuchMethod(Invocation.setter(#isProfileHeaderSet, value),
          returnValueForMissingStub: null);
  @override
  String get headerPath =>
      (super.noSuchMethod(Invocation.getter(#headerPath), returnValue: '')
          as String);
  @override
  set headerPath(String? value) =>
      super.noSuchMethod(Invocation.setter(#headerPath, value),
          returnValueForMissingStub: null);
  @override
  bool get useDemoImage =>
      (super.noSuchMethod(Invocation.getter(#useDemoImage), returnValue: false)
          as bool);
  @override
  set useDemoImage(bool? value) =>
      super.noSuchMethod(Invocation.setter(#useDemoImage, value),
          returnValueForMissingStub: null);
  @override
  _i4.AutoThemeModeType get autoThemeMode =>
      (super.noSuchMethod(Invocation.getter(#autoThemeMode),
          returnValue: _i4.AutoThemeModeType.on) as _i4.AutoThemeModeType);
  @override
  set autoThemeMode(_i4.AutoThemeModeType? themeMode) =>
      super.noSuchMethod(Invocation.setter(#autoThemeMode, themeMode),
          returnValueForMissingStub: null);
  @override
  _i5.Future<void> init() => (super.noSuchMethod(Invocation.method(#init, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
}

/// A class which mocks [LoggingService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoggingService extends _i1.Mock implements _i6.LoggingService {
  MockLoggingService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void info(Type? type, String? msg, [List<Object>? args]) =>
      super.noSuchMethod(Invocation.method(#info, [type, msg, args]),
          returnValueForMissingStub: null);
  @override
  void warning(Type? type, String? msg, [dynamic ex, StackTrace? trace]) =>
      super.noSuchMethod(Invocation.method(#warning, [type, msg, ex, trace]),
          returnValueForMissingStub: null);
  @override
  void error(Type? type, String? msg, [dynamic ex, StackTrace? trace]) =>
      super.noSuchMethod(Invocation.method(#error, [type, msg, ex, trace]),
          returnValueForMissingStub: null);
}

/// A class which mocks [DeviceInfoService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeviceInfoService extends _i1.Mock implements _i7.DeviceInfoService {
  MockDeviceInfoService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Map<String, String> get deviceInfo =>
      (super.noSuchMethod(Invocation.getter(#deviceInfo),
          returnValue: <String, String>{}) as Map<String, String>);
  @override
  String get appName =>
      (super.noSuchMethod(Invocation.getter(#appName), returnValue: '')
          as String);
  @override
  String get version =>
      (super.noSuchMethod(Invocation.getter(#version), returnValue: '')
          as String);
  @override
  bool get versionChanged => (super
          .noSuchMethod(Invocation.getter(#versionChanged), returnValue: false)
      as bool);
  @override
  _i5.Future<void> init() => (super.noSuchMethod(Invocation.method(#init, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
}
